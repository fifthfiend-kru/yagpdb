// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("CustomCommandGroups", testCustomCommandGroups)
	t.Run("CustomCommands", testCustomCommands)
}

func TestDelete(t *testing.T) {
	t.Run("CustomCommandGroups", testCustomCommandGroupsDelete)
	t.Run("CustomCommands", testCustomCommandsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("CustomCommandGroups", testCustomCommandGroupsQueryDeleteAll)
	t.Run("CustomCommands", testCustomCommandsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("CustomCommandGroups", testCustomCommandGroupsSliceDeleteAll)
	t.Run("CustomCommands", testCustomCommandsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("CustomCommandGroups", testCustomCommandGroupsExists)
	t.Run("CustomCommands", testCustomCommandsExists)
}

func TestFind(t *testing.T) {
	t.Run("CustomCommandGroups", testCustomCommandGroupsFind)
	t.Run("CustomCommands", testCustomCommandsFind)
}

func TestBind(t *testing.T) {
	t.Run("CustomCommandGroups", testCustomCommandGroupsBind)
	t.Run("CustomCommands", testCustomCommandsBind)
}

func TestOne(t *testing.T) {
	t.Run("CustomCommandGroups", testCustomCommandGroupsOne)
	t.Run("CustomCommands", testCustomCommandsOne)
}

func TestAll(t *testing.T) {
	t.Run("CustomCommandGroups", testCustomCommandGroupsAll)
	t.Run("CustomCommands", testCustomCommandsAll)
}

func TestCount(t *testing.T) {
	t.Run("CustomCommandGroups", testCustomCommandGroupsCount)
	t.Run("CustomCommands", testCustomCommandsCount)
}

func TestInsert(t *testing.T) {
	t.Run("CustomCommandGroups", testCustomCommandGroupsInsert)
	t.Run("CustomCommandGroups", testCustomCommandGroupsInsertWhitelist)
	t.Run("CustomCommands", testCustomCommandsInsert)
	t.Run("CustomCommands", testCustomCommandsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("CustomCommandToCustomCommandGroupUsingGroup", testCustomCommandToOneCustomCommandGroupUsingGroup)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("CustomCommandGroupToGroupCustomCommands", testCustomCommandGroupToManyGroupCustomCommands)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("CustomCommandToCustomCommandGroupUsingGroupCustomCommands", testCustomCommandToOneSetOpCustomCommandGroupUsingGroup)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("CustomCommandToCustomCommandGroupUsingGroupCustomCommands", testCustomCommandToOneRemoveOpCustomCommandGroupUsingGroup)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("CustomCommandGroupToGroupCustomCommands", testCustomCommandGroupToManyAddOpGroupCustomCommands)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("CustomCommandGroupToGroupCustomCommands", testCustomCommandGroupToManySetOpGroupCustomCommands)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("CustomCommandGroupToGroupCustomCommands", testCustomCommandGroupToManyRemoveOpGroupCustomCommands)
}

func TestReload(t *testing.T) {
	t.Run("CustomCommandGroups", testCustomCommandGroupsReload)
	t.Run("CustomCommands", testCustomCommandsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("CustomCommandGroups", testCustomCommandGroupsReloadAll)
	t.Run("CustomCommands", testCustomCommandsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("CustomCommandGroups", testCustomCommandGroupsSelect)
	t.Run("CustomCommands", testCustomCommandsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("CustomCommandGroups", testCustomCommandGroupsUpdate)
	t.Run("CustomCommands", testCustomCommandsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("CustomCommandGroups", testCustomCommandGroupsSliceUpdateAll)
	t.Run("CustomCommands", testCustomCommandsSliceUpdateAll)
}
