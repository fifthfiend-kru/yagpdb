// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCustomCommands(t *testing.T) {
	t.Parallel()

	query := CustomCommands()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCustomCommandsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomCommand{}
	if err = randomize.Struct(seed, o, customCommandDBTypes, true, customCommandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomCommand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CustomCommands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCustomCommandsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomCommand{}
	if err = randomize.Struct(seed, o, customCommandDBTypes, true, customCommandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomCommand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CustomCommands().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CustomCommands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCustomCommandsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomCommand{}
	if err = randomize.Struct(seed, o, customCommandDBTypes, true, customCommandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomCommand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CustomCommandSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CustomCommands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCustomCommandsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomCommand{}
	if err = randomize.Struct(seed, o, customCommandDBTypes, true, customCommandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomCommand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CustomCommandExists(ctx, tx, o.GuildID, o.LocalID)
	if err != nil {
		t.Errorf("Unable to check if CustomCommand exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CustomCommandExists to return true, but got false.")
	}
}

func testCustomCommandsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomCommand{}
	if err = randomize.Struct(seed, o, customCommandDBTypes, true, customCommandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomCommand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	customCommandFound, err := FindCustomCommand(ctx, tx, o.GuildID, o.LocalID)
	if err != nil {
		t.Error(err)
	}

	if customCommandFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCustomCommandsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomCommand{}
	if err = randomize.Struct(seed, o, customCommandDBTypes, true, customCommandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomCommand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CustomCommands().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCustomCommandsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomCommand{}
	if err = randomize.Struct(seed, o, customCommandDBTypes, true, customCommandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomCommand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CustomCommands().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCustomCommandsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	customCommandOne := &CustomCommand{}
	customCommandTwo := &CustomCommand{}
	if err = randomize.Struct(seed, customCommandOne, customCommandDBTypes, false, customCommandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomCommand struct: %s", err)
	}
	if err = randomize.Struct(seed, customCommandTwo, customCommandDBTypes, false, customCommandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomCommand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = customCommandOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = customCommandTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CustomCommands().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCustomCommandsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	customCommandOne := &CustomCommand{}
	customCommandTwo := &CustomCommand{}
	if err = randomize.Struct(seed, customCommandOne, customCommandDBTypes, false, customCommandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomCommand struct: %s", err)
	}
	if err = randomize.Struct(seed, customCommandTwo, customCommandDBTypes, false, customCommandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomCommand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = customCommandOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = customCommandTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CustomCommands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testCustomCommandsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomCommand{}
	if err = randomize.Struct(seed, o, customCommandDBTypes, true, customCommandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomCommand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CustomCommands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCustomCommandsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomCommand{}
	if err = randomize.Struct(seed, o, customCommandDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CustomCommand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(customCommandColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CustomCommands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCustomCommandToOneCustomCommandGroupUsingGroup(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CustomCommand
	var foreign CustomCommandGroup

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, customCommandDBTypes, true, customCommandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomCommand struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, customCommandGroupDBTypes, false, customCommandGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomCommandGroup struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.GroupID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Group().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CustomCommandSlice{&local}
	if err = local.L.LoadGroup(ctx, tx, false, (*[]*CustomCommand)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Group = nil
	if err = local.L.LoadGroup(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCustomCommandToOneSetOpCustomCommandGroupUsingGroup(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CustomCommand
	var b, c CustomCommandGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, customCommandDBTypes, false, strmangle.SetComplement(customCommandPrimaryKeyColumns, customCommandColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, customCommandGroupDBTypes, false, strmangle.SetComplement(customCommandGroupPrimaryKeyColumns, customCommandGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, customCommandGroupDBTypes, false, strmangle.SetComplement(customCommandGroupPrimaryKeyColumns, customCommandGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*CustomCommandGroup{&b, &c} {
		err = a.SetGroup(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Group != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GroupCustomCommands[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.GroupID, x.ID) {
			t.Error("foreign key was wrong value", a.GroupID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GroupID))
		reflect.Indirect(reflect.ValueOf(&a.GroupID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.GroupID, x.ID) {
			t.Error("foreign key was wrong value", a.GroupID, x.ID)
		}
	}
}

func testCustomCommandToOneRemoveOpCustomCommandGroupUsingGroup(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CustomCommand
	var b CustomCommandGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, customCommandDBTypes, false, strmangle.SetComplement(customCommandPrimaryKeyColumns, customCommandColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, customCommandGroupDBTypes, false, strmangle.SetComplement(customCommandGroupPrimaryKeyColumns, customCommandGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetGroup(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveGroup(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Group().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Group != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.GroupID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.GroupCustomCommands) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCustomCommandsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomCommand{}
	if err = randomize.Struct(seed, o, customCommandDBTypes, true, customCommandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomCommand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCustomCommandsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomCommand{}
	if err = randomize.Struct(seed, o, customCommandDBTypes, true, customCommandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomCommand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CustomCommandSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCustomCommandsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomCommand{}
	if err = randomize.Struct(seed, o, customCommandDBTypes, true, customCommandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomCommand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CustomCommands().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	customCommandDBTypes = map[string]string{`LocalID`: `bigint`, `GuildID`: `bigint`, `GroupID`: `bigint`, `TriggerType`: `integer`, `TextTrigger`: `text`, `TextTriggerCaseSensitive`: `boolean`, `TimeTriggerInterval`: `integer`, `TimeTriggerExcludingDays`: `ARRAYsmallint`, `TimeTriggerExcludingHours`: `ARRAYsmallint`, `LastRun`: `timestamp with time zone`, `NextRun`: `timestamp with time zone`, `Responses`: `ARRAYtext`, `Channels`: `ARRAYbigint`, `ChannelsWhitelistMode`: `boolean`, `Roles`: `ARRAYbigint`, `RolesWhitelistMode`: `boolean`}
	_                    = bytes.MinRead
)

func testCustomCommandsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(customCommandPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(customCommandColumns) == len(customCommandPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CustomCommand{}
	if err = randomize.Struct(seed, o, customCommandDBTypes, true, customCommandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomCommand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CustomCommands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, customCommandDBTypes, true, customCommandPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CustomCommand struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCustomCommandsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(customCommandColumns) == len(customCommandPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CustomCommand{}
	if err = randomize.Struct(seed, o, customCommandDBTypes, true, customCommandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomCommand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CustomCommands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, customCommandDBTypes, true, customCommandPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CustomCommand struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(customCommandColumns, customCommandPrimaryKeyColumns) {
		fields = customCommandColumns
	} else {
		fields = strmangle.SetComplement(
			customCommandColumns,
			customCommandPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CustomCommandSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCustomCommandsUpsert(t *testing.T) {
	t.Parallel()

	if len(customCommandColumns) == len(customCommandPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CustomCommand{}
	if err = randomize.Struct(seed, &o, customCommandDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CustomCommand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CustomCommand: %s", err)
	}

	count, err := CustomCommands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, customCommandDBTypes, false, customCommandPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CustomCommand struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CustomCommand: %s", err)
	}

	count, err = CustomCommands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
